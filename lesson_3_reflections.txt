When would you want to use a remote repository rather than keeping all your work local?
  The simple answer is, it could act as a backup if I lose my work on a local machine.
  Other uses include that I could work from some other machine (like my home-pc) to do changes.
  But the most important I guess is collaboration among various folks working on the same project.
  By having a centralised repo on github, it would be easy to get changes of my peers.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
  The same reason u dont want remote to be updated whatever is there in local.
  Probably there are changes which u have in remote for some purpose but not
  useful or not needed. So if we let git decide it, these unnecessary changes
  will clutter our repo.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?
  Fork  - Cloning a repo from github to github
  Clone - Copying a repo from github to local
  Branch - Creating a label which will follow another line of commits in a
           repo
  I would use fork when I want to work on a project started by some other
  person and add my changes to it and proabably collaborate with some other
  folks. Even if I am working alone, I would not clone instead bcoz if I want
  to have another remote - different from where I cloned it would be to push
  my changes - I need not create another repo on github and push. Though one
  could do that as Sarah said - by forking we can give due credit to
  prinicipal owner of the project.

  Branching is not related to fork/clone, it something I would do when I want
  to work on a new or experimental feature or a bug fix - I mean something
  which wont clutter my master - which is the current working version of my repo.

What is the benefit of having a copy of the last known state of the remote
stored locally?
  First thing come into mind is that we can run "git status" and "git log"
  command without any internet connection which can be very helpful to know
  about remote status when we are in a "remote" area(pun intended).
  Second while pulling the changes it becomes easy where to add the stuff.
  Like if it is an out-of-order state, we don't lose the commit which is done
  by us not pushed and we can distinguish what is extra there from remote
  which is then merged.
  Third we could have fast-forward merges. Although it could be done without
  it, it is a nice way.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
  Its a difficult to think as we now use git/github so much.
  
  Obviously having a central repo is important bcoz I dont have to be
  physically present where my other collaborators are. If not, I have to send
  back and forth my changes in an email or something to do all sort of things
  like merging the changes, reviewing the changes etc. All those things are
  abstracted away by GITHUB and I can comment, review, get the changes easily
  without any hassle. Also auto checking whether pull requests can be merged
  is a great feature.

  As for what would be easier, probably I dont have to do extra stuff like
  creating pull-requets, pusing, pulling data and maybe some other meta stuff 
  that I have to do.

  But I guess thats ok bcoz the pros outweighs whatever cons I could think of
  and they are not that significant in the long-run.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?
    The main idea of having a different branch is to not clutter master or to
    have changes in it which is stable. If we wish include any changes, we
    will create another branch, get it reviewed (or somethimes pushed to prod)
    and then when everything is ok - merged into master. By following
    different branch we can have our master clean. Obviously this is required
    when there is collaboration and multiple folks will be working on multiple
    features etc. Couple of other things are discussed in reflection question on branches.

    Now the case in which making changes to master directly is good. I can't
    think of any case - probably bcoz of Einstellung. Even for a single
    developer on a project - it would be nice to have different branches so he
    can work on multiple ideas and scrap any idea if he doent like it instead
    of detached HEAD stuff. But probably if it is not a big project and it
    will pretty much go forward rather than fixing something in the previous
    versions, then having single master is good enough I guess.
