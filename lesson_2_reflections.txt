What happens when you initialize a repository? Why do you need to do it?
  Git creates a hidden directory named ".git". It contains meta-data about my
  repo. It is needed to create the required-info which git needs to maintain
  for tracking the files, commits etc.

How is the staging area different from the working directory and the
repository? What value do you think it offers?
  Staging-area is kind of middle-ground b/w working directory and repository.
  It contains the changes that has to be added to repo but not yet commited.
  There may be some changes which are present in working directory but we do
  not wish to commit yet or do it in next commit as there are multiple logical
  changes being done. So it helps us in giving control of which files to commit,
  so that we can do one logical change per commit.

How can you use the staging area to make sure you have one commit per logical
change?
  Just add only those files which represents one logical change. Then u can go
  ahead and commit it. U can do repeatedly for all the changes.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?
  - Say u have released something - which is current commit in master. That is
    stable version of ur software. Then if u started making some changes on
    that instead on an another branch, it would be difficult for u to go back
    to that commit when something has to be fixed on top of that. Even if
    there is a way to go back (like using tags), we will be discarding the new
    changes or we have to save it somewhere and then bring them back. Instead
    having a branch in the first place will separate the main change from new
    change and we can later merge once the new changes are properly tested and
    put in production.

How do the diagrams help you visualize the branch structure?
  A picture says more than 1000 words. I think that summarizes it. But to
  tell more, it just removes all the unnecceary clutter and gives nice
  overview.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
 When we merge two branches, we create a new commit which will be pointing to
 previous two heads of branches. The branch in which the changes are merged
 into will point to this commit. The way it is being represented in the diagram
 the way it is because of the above reason. We should understand that when we
 are merging branches we are not losing commits in the other branch. Also when
 we refer to branch, we are just referring to a label. So in the merge commit,
 we will merge the changes accordingly and to represent the history, we will
 point that commit to previous two branches.
